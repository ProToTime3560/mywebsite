<%- include('layout', { user: null }) %>

<div class="container mt-5">
    <h2 class="text-center">회원가입</h2>
    <form id="email-form">
        <div class="form-group">
            <label for="email">이메일</label>
            <input type="email" class="form-control" id="email" name="email" required>
            <button type="button" class="btn btn-primary mt-2" id="send-auth-code-btn">인증메일 보내기</button>
            <button type="button" class="btn btn-secondary mt-2" id="change-email-btn" style="display: none;">메일 변경하기</button>
        </div>
    </form>
    <form id="auth-section" class="form-section" style="display: none;">
        <div class="form-group">
            <label for="auth-code">인증번호</label>
            <input type="text" class="form-control" id="auth-code" name="auth-code" required>
            <button type="button" class="btn btn-primary mt-2" id="verify-auth-code-btn">인증하기</button>
        </div>
        <div id="timer" class="mt-2 text-center">5:00</div>
    </form>
    <form id="register-form" class="form-section" style="display: none;">
        <div class="form-group">
            <label for="user_id">아이디</label>
            <input type="text" class="form-control" id="user_id" name="user_id" required>
            <button type="button" class="btn btn-primary mt-2" id="check-id-btn">중복확인</button>
            <div id="id-check-result" class="mt-2"></div>
        </div>
        <div class="form-group">
            <label for="user_password">비밀번호</label>
            <input type="password" class="form-control" id="user_password" name="user_password" required>
        </div>
        <div class="form-group">
            <label for="confirm_password">비밀번호 재입력</label>
            <input type="password" class="form-control" id="confirm_password" name="confirm_password" required>
            <div id="password-match-result" class="mt-2"></div>
        </div>
        <button type="button" id="register-button" class="btn btn-primary mt-3">회원가입</button>
    </form>
</div>

<script>
    const sendAuthCodeBtn = document.getElementById('send-auth-code-btn');
    const verifyAuthCodeBtn = document.getElementById('verify-auth-code-btn');
    const emailForm = document.getElementById('email-form');
    const authSection = document.getElementById('auth-section');
    const timerDisplay = document.getElementById('timer');
    const registerForm = document.getElementById('register-form');
    const checkIdBtn = document.getElementById('check-id-btn');
    const user_idInput = document.getElementById('user_id');
    const idCheckResult = document.getElementById('id-check-result');
    const passwordInput = document.getElementById('user_password');
    const confirmPasswordInput = document.getElementById('confirm_password');
    const passwordMatchResult = document.getElementById('password-match-result');
    const changeEmailBtn = document.getElementById('change-email-btn');
    const emailInput = document.getElementById('email');
    const registerBtn = document.getElementById('register-button');

    let timerInterval;

    // 상태를 저장하는 변수들
    let isEmailVerified = false;
    let isIdAvailable = false;
    let isPasswordMatched = false;

    sendAuthCodeBtn.addEventListener('click', () => {
        const email = emailInput.value;
    
        // 이메일 중복 확인 요청
        fetch('/email-duplication-check', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email })
        }).then(response => response.json())
        .then(data => {
            if (data.exists) {
                alert('해당 이메일은 이미 가입되어 있습니다!');
            } else {
                // 이메일이 중복되지 않으면 인증 코드 발송 요청
                fetch('/send-auth-code', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email })
                }).then(response => response.json())
                .then(data => {
                    if (data.success) {
                        emailInput.disabled = true;
                        sendAuthCodeBtn.textContent = '인증메일 재전송';
                        changeEmailBtn.style.display = 'inline-block';
                        authSection.style.display = 'block';
                        isEmailVerified = false;
                        startTimer(5 * 60); // 5분 타이머 시작
                        alert('메일이 성공적으로 발송되었습니다!');
                    } else {
                        alert(data.error);
                    }
                });
            }
        }).catch(error => {
            console.error('Error checking email duplication:', error);
            alert('이메일 중복 확인 중 오류가 발생했습니다.');
        });
    });

    changeEmailBtn.addEventListener('click', () => {
        emailInput.disabled = false;
        emailInput.value = '';
        sendAuthCodeBtn.textContent = '인증메일 보내기';
        changeEmailBtn.style.display = 'none';
        authSection.style.display = 'none';
        clearInterval(timerInterval);
        timerDisplay.textContent = '5:00';
        isEmailVerified = false;
    });

    verifyAuthCodeBtn.addEventListener('click', () => {
        const email = emailInput.value;
        const authCode = document.getElementById('auth-code').value;
        fetch('/verify-auth-code', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email, authCode })
        }).then(response => response.json())
        .then(data => {
            if (data.success) {
                clearInterval(timerInterval);
                registerForm.style.display = 'block';
                timerDisplay.innerHTML = '';
                isEmailVerified = true;
            } else {
                alert(data.error);
            }
        });
    });

    checkIdBtn.addEventListener('click', () => {
        const userId = document.getElementById('user_id').value;
        fetch('/check-id', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ user_id: userId })
        }).then(response => response.json())
        .then(data => {
            if (data.success) {
                idCheckResult.innerHTML = '<span style="color: green;">사용 가능한 아이디입니다.</span>';
                isIdAvailable = true;
            } else {
                idCheckResult.innerHTML = '<span style="color: red;">이미 존재하는 아이디입니다.</span>';
                isIdAvailable = false;
            }
        });
    });

    //유저가 중복확인후 아이디 입력란에 수정이 발생하면 중복 결과 초기화
    user_idInput.addEventListener('input', () => {
        idCheckResult.innerHTML = ''; // 입력란 수정 시 중복 확인 결과 초기화
        isIdAvailable = false;
    });

    passwordInput.addEventListener('input', () => {
        if (passwordInput.value !== confirmPasswordInput.value) {
            passwordMatchResult.innerHTML = '<span style="color: red;">입력한 비밀번호와 일치하지 않습니다.</span>';
            isPasswordMatched = false;
        } else {
            passwordMatchResult.innerHTML = '';
            isPasswordMatched = true;
        }
    });

    confirmPasswordInput.addEventListener('input', () => {
        if (passwordInput.value !== confirmPasswordInput.value) {
            passwordMatchResult.innerHTML = '<span style="color: red;">입력한 비밀번호와 일치하지 않습니다.</span>';
            isPasswordMatched = false;
        } else {
            passwordMatchResult.innerHTML = '';
            isPasswordMatched = true;
        }
    });

    registerBtn.addEventListener('click', async (event) => {
        event.preventDefault(); // 기본 폼 제출 동작을 막음

        if (isEmailVerified && isIdAvailable && isPasswordMatched) {
            try {
                // 모든 조건을 통과한 경우 회원가입 요청
                const formData = new FormData(registerForm);
                const data = {
                    user_id: formData.get('user_id'),
                    user_password: formData.get('user_password'),
                    confirm_password: formData.get('confirm_password'),
                    user_email: emailInput.value // 이메일 추가
                };

                const registerResponse = await fetch('/register-start', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                const registerData = await registerResponse.json();

                if (registerData.success) {
                    window.location.href = '/login';
                } else {
                    alert(registerData.error);
                }
            } catch (error) {
                console.error('Error during registration:', error);
            }
        } else {
            alert('모든 조건을 만족해야 회원가입이 가능합니다.');
        }
    });

    function startTimer(duration) {
        let timer = duration, minutes, seconds;
        clearInterval(timerInterval); // 기존 타이머가 있으면 초기화
        timerInterval = setInterval(() => {
            minutes = parseInt(timer / 60, 10);
            seconds = parseInt(timer % 60, 10);

            minutes = minutes < 10 ? '0' + minutes : minutes;
            seconds = seconds < 10 ? '0' + seconds : seconds;

            timerDisplay.textContent = minutes + ':' + seconds;

            if (--timer < 0) {
                clearInterval(timerInterval);
                alert('인증 시간이 만료되었습니다.');
                emailInput.disabled = false;
                sendAuthCodeBtn.textContent = '인증메일 보내기';
                changeEmailBtn.style.display = 'none';
                authSection.style.display = 'none';
                timerDisplay.textContent = '5:00';
            }
        }, 1000);
    }
</script>
